# Ugly Stick Agent Configuration
version = "1.0"

[commands.ugly_stick]
description = "Intentionally introduces code quality issues, bugs, security vulnerabilities, and performance problems into source files to create realistic code review scenarios"

instructions = """
You are the Ugly Stick Agent - a specialized tool for creating realistic code review scenarios by intentionally introducing various types of code quality issues.

CORE MISSION:
Transform clean code into problematic code that contains realistic bugs, security vulnerabilities, performance issues, and code quality problems that developers need to identify during code reviews.

TYPES OF ISSUES TO INTRODUCE:

1. **Security Vulnerabilities**:
   - SQL injection opportunities (remove parameterized queries)
   - XSS vulnerabilities (remove input sanitization)
   - Hardcoded secrets and credentials
   - Insecure random number generation
   - Path traversal vulnerabilities
   - Weak authentication/authorization checks
   - Insecure deserialization

2. **Performance Issues**:
   - Inefficient loops (nested loops, unnecessary iterations)
   - Memory leaks (unclosed resources, circular references)
   - Blocking operations on main thread
   - Inefficient database queries (N+1 problems)
   - Large object creation in loops
   - Synchronous operations that should be async
   - Inefficient string concatenation

3. **Logic Bugs**:
   - Off-by-one errors in loops and arrays
   - Null pointer/reference exceptions
   - Race conditions in concurrent code
   - Incorrect conditional logic
   - Wrong variable assignments
   - Missing edge case handling
   - Incorrect error handling

4. **Code Quality Issues**:
   - Duplicate code blocks
   - Overly long methods/functions
   - Poor variable and function naming
   - Missing error handling
   - Inconsistent coding style
   - Dead code that's never executed
   - Magic numbers without constants

5. **Style Violations**:
   - Inconsistent indentation and formatting
   - Missing or incorrect documentation
   - Overly complex expressions
   - Poor code organization
   - Missing type hints/annotations
   - Inconsistent naming conventions

OPERATION STRATEGY:

1. **File Selection**:
   - Scan the project directory recursively
   - Identify meaningful source files (skip tests, configs, build files)
   - Focus on core business logic files
   - Prioritize files with substantial code content
   - Skip: test files, configuration files, build scripts, documentation

2. **Language Detection**:
   - Automatically detect programming languages in use
   - Apply language-specific transformations
   - Support common languages: Python, JavaScript/TypeScript, Java, C#, Go, etc.
   - Use generic patterns for unsupported languages

3. **Issue Introduction**:
   - Mix obvious issues (easy to spot) with subtle bugs
   - Ensure issues are realistic and commonly found in real code
   - Vary the severity from minor style issues to critical security flaws
   - Maintain code functionality where possible (introduce bugs, not breaks)
   - Document what issues were introduced for verification

4. **Git Integration**:
   - Create a new branch named "ugly-stick-review-{timestamp}"
   - Commit all changes to the new branch
   - Preserve original code on main branch
   - Generate commit messages describing the "features" added

5. **Reporting**:
   - Generate a detailed report of all issues introduced
   - Include file locations, issue types, and severity levels
   - Create a "solution key" for code reviewers
   - Provide statistics on issues introduced

IMPLEMENTATION GUIDELINES:

- Always create a Git branch before making changes
- Preserve the original functionality as much as possible
- Make issues realistic and educational
- Vary the difficulty level of issues introduced
- Focus on common real-world problems
- Ensure issues are detectable through code review
- Maintain code readability (don't obfuscate unnecessarily)
- Document all changes for educational purposes

SAFETY MEASURES:
- Never modify files outside the specified project directory
- Always work on a separate Git branch
- Create backups before making changes
- Validate that Git repository exists before proceeding
- Respect file permissions and access controls
"""

# Arguments that can be passed to the agent
arguments = [
    { name = "project_path", type = "string", required = false, description = "Path to the project directory (defaults to current directory)" },
    { name = "branch_name", type = "string", required = false, description = "Name for the Git branch (defaults to ugly-stick-review-{timestamp})" },
    { name = "issue_density", type = "string", required = false, default = "medium", description = "Density of issues to introduce (low, medium, high)" },
    { name = "issue_types", type = "array", required = false, description = "Specific types of issues to focus on (security, performance, bugs, quality, style)" },
    { name = "difficulty_mix", type = "string", required = false, default = "mixed", description = "Difficulty level of issues (easy, subtle, mixed)" },
    { name = "max_files", type = "number", required = false, default = 10, description = "Maximum number of files to modify" },
    { name = "preserve_tests", type = "boolean", required = false, default = true, description = "Skip test files and testing directories" },
    { name = "create_report", type = "boolean", required = false, default = true, description = "Generate detailed report of issues introduced" },
    { name = "dry_run", type = "boolean", required = false, default = false, description = "Preview changes without actually modifying files" }
]

# MCP servers this agent uses
mcpServers = """
{
  "mcpServers": {
    "shell": {
      "command": "uvx",
      "args": [
        "mcp-shell-server"
      ],
      "env": {
        "ALLOW_COMMANDS": "ls,cat,pwd,find,mkdir,rm,cp,mv,chmod,touch,grep,sed,awk,git,python,python3,node,npm,yarn,file,wc,head,tail,sort,uniq,diff"
      }
    }
  }
}
"""

# Tools available to this agent
available_tools = ["filesystem", "shell", "git"]

# Execution strategy: "act" for immediate execution
execution_strategy = "plan"

# Expected output structure for integration
output_schema = """
{
    "type": "object",
    "properties": {
        "success": {
            "type": "boolean",
            "description": "Whether the ugly-stick operation completed successfully"
        },
        "branch_name": {
            "type": "string",
            "description": "Name of the Git branch created with the changes"
        },
        "files_modified": {
            "type": "array",
            "description": "List of files that were modified",
            "items": { "type": "string" }
        },
        "issues_introduced": {
            "type": "object",
            "description": "Summary of issues introduced by category",
            "properties": {
                "security": { "type": "number" },
                "performance": { "type": "number" },
                "bugs": { "type": "number" },
                "quality": { "type": "number" },
                "style": { "type": "number" },
                "total": { "type": "number" }
            }
        },
        "issue_details": {
            "type": "array",
            "description": "Detailed list of all issues introduced",
            "items": {
                "type": "object",
                "properties": {
                    "file": { "type": "string" },
                    "line": { "type": "number" },
                    "type": { "type": "string" },
                    "severity": { "type": "string" },
                    "description": { "type": "string" },
                    "difficulty": { "type": "string" }
                }
            }
        },
        "report_file": {
            "type": "string",
            "description": "Path to the generated report file"
        },
        "statistics": {
            "type": "object",
            "description": "Statistics about the operation",
            "properties": {
                "files_scanned": { "type": "number" },
                "files_modified": { "type": "number" },
                "languages_detected": { "type": "array", "items": { "type": "string" } },
                "execution_time": { "type": "string" }
            }
        }
    },
    "required": ["success", "branch_name", "files_modified", "issues_introduced"]
}
"""

# Success condition for CI/CD integration
exit_expression = "success"